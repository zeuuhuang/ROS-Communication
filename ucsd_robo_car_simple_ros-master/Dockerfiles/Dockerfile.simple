#
# this dockerfile roughly follows the 'Installing from source' from:
#   http://wiki.ros.org/noetic/Installation/Source
#
ARG BASE_IMAGE=nvcr.io/nvidia/l4t-ml:r32.6.1-py3
FROM ${BASE_IMAGE}

ARG ROS_PKG=ros_base
ENV ROS_DISTRO=noetic
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}
ENV ROS_PYTHON_VERSION=3
ENV DEBIAN_FRONTEND=noninteractive
ARG ROS_ENVIRONMENT=${ROS_ROOT}/install/setup.bash
WORKDIR /workspace


#
# add the ROS deb repo to the apt sources list
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
          git \
		cmake \
		build-essential \
		curl \
		wget \
		gnupg2 \
		lsb-release \
		ca-certificates \
    && rm -rf /var/lib/apt/lists/*

RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
#RUN sh -c 'echo "deb http://packages.ros.org/ros-testing/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -
#RUN curl -s https://raw.githubusercontent.com/ccny-ros-pkg/scan_tools/ros1/.rosinstall

#
# install bootstrap dependencies
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
          libpython3-dev \
          python3-rosdep \
          python3-rosinstall-generator \
          python3-vcstool \
	  libasio-dev \
	  libtinyxml2-dev \
	  libcunit1-dev \
	  libgazebo9-dev \
	  gazebo9 \
	  gazebo9-common \
	  gazebo9-plugin-base \
          nano \
          python-wstool\
          build-essential && \
    rosdep init && \
    rosdep update && \
    rm -rf /var/lib/apt/lists/*


#
# download/build the ROS source
#
SHELL ["/bin/bash", "-c"]
RUN ["/bin/bash", "-c", "\
    mkdir ros_catkin_ws && \
    cd ros_catkin_ws && \
    apt-get update -y && \
    rosinstall_generator \
        ${ROS_PKG} \
        vision_msgs \
        rviz \       
    --rosdistro ${ROS_DISTRO} \
    --deps \
    --tar > ${ROS_DISTRO}-${ROS_PKG}.rosinstall && \
    mkdir src && \
    vcs import --input ${ROS_DISTRO}-${ROS_PKG}.rosinstall ./src && \
    apt-get update && \
    rosdep install --from-paths ./src --ignore-packages-from-source --rosdistro ${ROS_DISTRO} --skip-keys python3-pykdl -y && \
    python3 ./src/catkin/bin/catkin_make_isolated --install --install-space ${ROS_ROOT} -DCMAKE_BUILD_TYPE=Release && \
    rm -rf /var/lib/apt/lists/*"]


#
# adafruit servokit
#
RUN pip3 install adafruit-circuitpython-pca9685
RUN pip3 install adafruit-circuitpython-servokit
RUN apt-get update \
    && apt-get install -y \
    python3-pip \
    python-catkin-tools \
    python3-dev
RUN pip3 install \
    rospkg \
    catkin_pkg \
    Jetson.GPIO \
    && groupadd -f -r gpio \
    && usermod -a -G gpio root


#
# Buidling cv_bridge for python3 & noetic
#
WORKDIR /
RUN mkdir /cvbridge_build_ws
RUN mkdir /cvbridge_build_ws/src
WORKDIR /cvbridge_build_ws/src
RUN git clone -b noetic https://github.com/ros-perception/vision_opencv.git
WORKDIR /cvbridge_build_ws/src/vision_opencv/cv_bridge


#
# Modify CMakelist.txt for python3
#
SHELL ["/bin/bash", "-c"]
RUN \
echo $'cmake_minimum_required(VERSION 3.0.2) \n\
project(cv_bridge) \n\
find_package(catkin REQUIRED COMPONENTS rosconsole sensor_msgs) \n\
if(NOT ANDROID) \n\
  find_package(PythonLibs) \n\
  if(PYTHONLIBS_VERSION_STRING VERSION_LESS "3.8") \n\
    # Debian Buster \n\
    find_package(Boost REQUIRED python3) \n\
  else() \n\
    # Ubuntu Focal \n\
    find_package(Boost REQUIRED python) \n\
  endif() \n\
else() \n\
find_package(Boost REQUIRED) \n\
endif() \n\
set(_opencv_version 4) \n\
find_package(OpenCV 4 QUIET) \n\
if(NOT OpenCV_FOUND) \n\
  message(STATUS "Did not find OpenCV 4, trying OpenCV 3") \n\
  set(_opencv_version 3) \n\
endif() \n\
find_package(OpenCV ${_opencv_version} REQUIRED \n\
  COMPONENTS \n\
    opencv_core \n\
    opencv_imgproc \n\
    opencv_imgcodecs \n\
  CONFIG \n\
) \n\
catkin_package( \n\
  INCLUDE_DIRS include \n\
  LIBRARIES ${PROJECT_NAME} \n\
  CATKIN_DEPENDS rosconsole sensor_msgs \n\
  DEPENDS OpenCV \n\
  CFG_EXTRAS cv_bridge-extras.cmake \n\
) \n\
catkin_python_setup() \n\
include_directories(include ${Boost_INCLUDE_DIRS} ${OpenCV_INCLUDE_DIRS} ${catkin_INCLUDE_DIRS}) \n\
link_directories(${Boost_LIBRARY_DIRS}) \n\
if(NOT ANDROID) \n\
add_subdirectory(python) \n\
endif() \n\
add_subdirectory(src) \n\
if(CATKIN_ENABLE_TESTING) \n\
  add_subdirectory(test) \n\
endif() \n\
# install the include folder \n\
install(DIRECTORY include/${PROJECT_NAME}/ \n\
  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION})' > CMakeLists.txt


#
# Building cv_bridge
#
WORKDIR /cvbridge_build_ws/
RUN ["/bin/bash", "-c", "source /opt/ros/${ROS_DISTRO}/setup.bash"]
RUN . /opt/ros/noetic/setup.sh
RUN \
    catkin config --cmake-args \
    -Dcatkin_DIR=CATKIN_CMAKE_CONFIG_PATH \
    -DPYTHON_EXECUTABLE=/usr/bin/python3 \
    -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m \
    -DPYTHON_LIBRARY=/usr/lib/aarch64-linux-gnu/libpython3.6m.so \
    && . /opt/ros/noetic/setup.sh \
    && catkin config --install \
    && catkin build cv_bridge


#
# Create catkin_ws
#
WORKDIR /
RUN mkdir -p /home/projects/catkin_ws/src


#
# Get ucsd_robo_Car
#
WORKDIR /home/projects/catkin_ws/src
RUN git clone -b docker https://gitlab.com/djnighti/ucsd_robo_car_simple_ros.git
WORKDIR /home/projects/catkin_ws/
RUN ["/bin/bash", "-c", \
        "source /opt/ros/${ROS_DISTRO}/setup.bash \
         && catkin_make \
         && source devel/setup.bash"]


#
# Place user in catkin_ws
#
WORKDIR /home/projects/catkin_ws/
RUN ["/bin/bash", "-c", \
        "source /opt/ros/${ROS_DISTRO}/setup.bash \
         && source /cvbridge_build_ws/install/setup.bash \
         && catkin_make \
         && source devel/setup.bash"]

RUN echo 'source /opt/ros/${ROS_DISTRO}/setup.bash' >> /root/.bashrc
RUN echo 'source /cvbridge_build_ws/install/setup.bash' >> /root/.bashrc
RUN echo 'source /home/projects/catkin_ws/devel/setup.bash' >> /root/.bashrc
RUN chmod -R 777 src/ucsd_robo_car_simple_ros .
