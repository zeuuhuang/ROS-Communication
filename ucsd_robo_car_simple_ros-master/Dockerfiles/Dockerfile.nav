# This is an auto generated Dockerfile for ros:desktop-full
# generated from docker_images/create_ros_image.Dockerfile.em
FROM ros:noetic

###
# WIP!!!!!!!!!!!!!!!!!!!!!!!
###

ARG UBUNTU_RELEASE_YEAR=20
ARG ZED_SDK_MAJOR=3
ARG ZED_SDK_MINOR=5
ARG CUDA_MAJOR=10
ARG CUDA_MINOR=2
ARG OPENCV_VERSION=4.5.0
WORKDIR /

#
# install ros packages
#
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-noetic-desktop-full=1.5.0-1* \
    && rm -rf /var/lib/apt/lists/*

#
# install ros package
#
RUN apt-get update && apt-get install -y \
      ros-${ROS_DISTRO}-ros-tutorials \
      ros-${ROS_DISTRO}-hector-slam \
      ros-${ROS_DISTRO}-scan-tools \
      ros-${ROS_DISTRO}-map-server \
      ros-${ROS_DISTRO}-common-tutorials &&\
    rm -rf /var/lib/apt/lists/*

#
# install CUDA
#
WORKDIR /
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/sbsa/cuda-ubuntu2004.pin && \
    mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600 && \
    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/sbsa/7fa2af80.pub && \
    apt-get update && \
    apt-get install -y software-properties-common && \
    apt-get update && \
    apt-get -y install cuda


#
# install OpenCV (with CUDA)
#
WORKDIR /
RUN apt-get update && apt-get upgrade -y &&\
    # Install build tools, build dependencies and python
    apt-get install -y \
	python3-pip \
    build-essential \
    cmake \
    git \
    wget \
    unzip \
    yasm \
    pkg-config \
    libswscale-dev \
    libtbb2 \
    libtbb-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavformat-dev \
    libpq-dev \
    libxine2-dev \
    libglew-dev \
    libtiff5-dev \
    zlib1g-dev \
    libjpeg-dev \
    libavcodec-dev \
    libavformat-dev \
    libavutil-dev \
    libpostproc-dev \
    libswscale-dev \
    libeigen3-dev \
    libtbb-dev \
    libgtk2.0-dev \
    pkg-config \
    python3-dev \
    python3-numpy \
    && rm -rf /var/lib/apt/lists/*

RUN cd /opt/ &&\
    # Download and unzip OpenCV and opencv_contrib and delte zip files
    wget https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip && \
    unzip $OPENCV_VERSION.zip && \
    rm $OPENCV_VERSION.zip && \
    wget https://github.com/opencv/opencv_contrib/archive/$OPENCV_VERSION.zip && \
    unzip ${OPENCV_VERSION}.zip && \
    rm ${OPENCV_VERSION}.zip && \
    # Create build folder and switch to it
    mkdir /opt/opencv-${OPENCV_VERSION}/build && cd /opt/opencv-${OPENCV_VERSION}/build && \
    # Cmake configure
    cmake \
        -DOPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib-${OPENCV_VERSION}/modules \
        -DWITH_CUDA=ON \
        -DCMAKE_BUILD_TYPE=RELEASE \
        # Install path will be /usr/local/lib (lib is implicit)
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        .. && \
    # Make
    make -j"$(nproc)" && \
    # Install to /usr/local/lib
    make install && \
    ldconfig && \
    # Remove OpenCV sources and build folder
    rm -rf /opt/opencv-${OPENCV_VERSION} && rm -rf /opt/opencv_contrib-${OPENCV_VERSION}

#
# adafruit servokit
#
WORKDIR /
RUN pip3 install adafruit-circuitpython-pca9685
RUN pip3 install adafruit-circuitpython-servokit
RUN apt-get update && \
    apt-get install -y \
    python3-pip \
    python-catkin-tools \
    python3-dev \
    nano \
    iputils-ping \
    x11-apps \
    nautilus \
    firefox \
    git-all
RUN pip3 install \
    rospkg \
    catkin_pkg \
    Jetson.GPIO && \
    groupadd -f -r gpio && \
    usermod -a -G gpio root

#
# Vesc
#

#
# Create catkin_ws, rplidar_ws, rslidar_ws, zed_ws
#
WORKDIR /
RUN mkdir -p /home/projects/catkin_ws/src
RUN mkdir -p /home/projects/rplidar_ws/src
RUN mkdir -p /home/projects/rslidar_ws/src
RUN mkdir -p /home/projects/zed_ws/src

#
# Get ucsd_robo_Car
#
WORKDIR /home/projects/catkin_ws/src
RUN git clone -b docker https://gitlab.com/djnighti/ucsd_robo_car_simple_ros.git
RUN [\
    "/bin/bash", \
    "-c", \
    "source /opt/ros/${ROS_DISTRO}/setup.bash && \
    catkin_make && \
    source devel/setup.bash"\
    ]

#
# Get RPLidar
#
WORKDIR /home/projects/rplidar_ws/src
RUN git clone  https://github.com/Slamtec/rplidar_ros.git
WORKDIR /home/projects/rplidar_ws
RUN [\
    "/bin/bash", \
    "-c", \
    "source /opt/ros/${ROS_DISTRO}/setup.bash && \
    catkin_make && \
    source devel/setup.bash"\
    ]

#
# Get RS Bpearl
#
WORKDIR /home/projects/rslidar_ws/src
RUN git clone https://github.com/RoboSense-LiDAR/rslidar_sdk.git && \
    cd rslidar_sdk && \
    git submodule init && \
    git submodule update
WORKDIR /home/projects/rslidar_ws
RUN [\
    "/bin/bash", \
    "-c", \
        "source /opt/ros/${ROS_DISTRO}/setup.bash && \
        catkin_make && \
        source devel/setup.bash"\
    ]

#
# Setup the ZED SDK
#
RUN mkdir -p /home/Downloads
WORKDIR /home/Downloads
RUN apt-get update -y && apt-get upgrade -y && apt-get autoremove -y && \
    apt-get install --no-install-recommends lsb-release wget less udev sudo -y && \
    wget -q -O ZED_SDK_Linux_Ubuntu${UBUNTU_RELEASE_YEAR}.run \
    https://download.stereolabs.com/zedsdk/${ZED_SDK_MAJOR}.${ZED_SDK_MINOR}/cu${CUDA_MAJOR}${CUDA_MINOR}/ubuntu${UBUNTU_RELEASE_YEAR} && \
    chmod +x ZED_SDK_Linux_Ubuntu${UBUNTU_RELEASE_YEAR}.run ; ./ZED_SDK_Linux_Ubuntu${UBUNTU_RELEASE_YEAR}.run -- silent runtime_only && \
    rm ZED_SDK_Linux_Ubuntu${UBUNTU_RELEASE_YEAR}.run && \
    rm -rf /var/lib/apt/lists/*

#
# Get ZED
#
WORKDIR /home/projects/zed_ws/src
RUN git clone --recursive https://github.com/stereolabs/zed-ros-wrapper.git
WORKDIR /home/projects/zed_ws/
RUN [\
    "/bin/bash", \
    "-c", \
        "source /opt/ros/${ROS_DISTRO}/setup.bash && \
        rosdep install --from-paths src --ignore-src -r -y && \
        catkin_make -DCMAKE_BUILD_TYPE=Release && \
        source devel/setup.bash"\
    ]

#
# Source all builds
#
WORKDIR /
RUN echo 'source /opt/ros/${ROS_DISTRO}/setup.bash' >> /root/.bashrc && \
    echo 'source /home/projects/rplidar_ws/devel/setup.bash' >> /root/.bashrc && \
    echo 'source /home/projects/rslidar_ws/devel/setup.bash' >> /root/.bashrc && \
    echo 'cd /home/projects/catkin_ws/' >> /root/.bashrc && \
    echo 'catkin_make' >> /root/.bashrc && \
    echo 'source devel/setup.bash' >> /root/.bashrc

#
# Place user in catkin_ws
#
WORKDIR /home/projects/catkin_ws/

